const { google } = require('googleapis');
const { Markup } = require('telegraf');
const { Telegraf } = require('telegraf');
const fs = require('fs');
require('dotenv').config();

const keys = {
  client_email: process.env.CLIENT_EMAIL,
  private_key: process.env.PRIVATE_KEY,
};


const bot = new Telegraf('7629602871:AAGOYX5eqcVHujr8DFZP-WklZ2XX0RPQItE');


const client = new google.auth.JWT(
  keys.client_email,
  null,
  keys.private_key,
  ['https://www.googleapis.com/auth/spreadsheets']
);

const spreadsheetId = '1J8gCRcoZoZWx4Wvqjht9nd_o77ogxoYcS03anzt8sKc';


async function getSheetData(range) {
  const sheets = google.sheets({ version: 'v4', auth: client });
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });
  return res.data.values;
}


async function updateSheetData(range, values) {
  const sheets = google.sheets({ version: 'v4', auth: client });
  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range,
    valueInputOption: 'RAW',
    resource: { values },
  });
}


let userData = {};
let currentStep = null;

async function checkAndFillCard(cardNumber) {
  const rows = await getSheetData('–õ–∏—Å—Ç1!A2:I52');
  const cardRow = rows.findIndex(row => row[1] === cardNumber); 

  if (cardRow !== -1) {
    const rowData = rows[cardRow].slice(3);
    const isRowEmpty = rowData.every(cell => !cell); 

    if (isRowEmpty) {
      return cardRow + 2; 
    } else {
      return null;
    }
  } else {
    return -1; 
  }
}


bot.start((ctx) => {
  chatId = ctx.chat.id;
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([['–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ üìù']]) 
      .resize() 
      .oneTime()
  );
  currentStep = null; 
});


bot.hears('–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ üìù', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, #0016):');
  currentStep = 'card_number'; 
});


bot.on('text', async (ctx) => {
  const text = ctx.message.text;

  if (currentStep === 'card_number') {
    userData.cardNumber = text;

    const rowIndex = await checkAndFillCard(userData.cardNumber);

    if (rowIndex === -1) {
      ctx.reply(`‚ùå –ö–∞—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º ${userData.cardNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.`);
    } else if (rowIndex === null) {
      ctx.reply(`‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º ${userData.cardNumber} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.`);
    } else {
      userData.rowIndex = rowIndex; 
      ctx.reply('‚úÖ –ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! üéâ –í–≤–µ–¥–∏ —Ü–≤–µ—Ç –∫–∞—Ä—Ç—ã:');
      currentStep = 'color';
    }
  } else if (currentStep === 'color') {
    userData.color = text;
    ctx.reply('üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.09.2024):');
    currentStep = 'purchase_date';
  } else if (currentStep === 'purchase_date') {
    userData.purchaseDate = text;
    ctx.reply('üíµ –í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:');
    currentStep = 'price';
  } else if (currentStep === 'price') {
    userData.price = text;
    ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏ –§–ò–û:');
    currentStep = 'fio';
  } else if (currentStep === 'fio') {
    userData.fio = text;
    ctx.reply('üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    currentStep = 'phone';
  } else if (currentStep === 'phone') {
    userData.phone = text;
    ctx.reply('üéÇ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.10.2007):');  
    currentStep = 'dob'; 
  } else if (currentStep === 'dob') { 
    userData.dob = text;
    ctx.reply('üóì –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4):');
    currentStep = 'events';
  } else if (currentStep === 'events') {
    userData.events = text;
    ctx.reply('üö∂ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0):');
    currentStep = 'visits';
  } else if (currentStep === 'visits') {
    userData.visits = text;

    const rowIndex = userData.rowIndex;

    if (rowIndex) {
      await updateSheetData(`–õ–∏—Å—Ç1!A${rowIndex}:J${rowIndex}`, [
        [
          userData.color,
          userData.cardNumber,
          userData.purchaseDate,
          userData.price,
          userData.fio,
          userData.phone,
          userData.dob,  
          userData.events,
          userData.visits,
          userData.events - userData.visits 
        ],
      ]);

      ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üéâ');
      currentStep = null;
      userData = {}; 
    } else {
      ctx.reply('‚ùå –û—à–∏–±–∫–∞: rowIndex –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
