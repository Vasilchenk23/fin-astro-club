const { google } = require('googleapis');
const { Markup } = require('telegraf');
const { Telegraf } = require('telegraf');
const fs = require('fs');
require('dotenv').config();

const cron = require('node-cron');

const keys = {
  client_email: process.env.CLIENT_EMAIL,
  private_key: process.env.PRIVATE_KEY,
};

const bot = new Telegraf('7629602871:AAGOYX5eqcVHujr8DFZP-WklZ2XX0RPQItE');

const client = new google.auth.JWT(
  keys.client_email,
  null,
  keys.private_key,
  ['https://www.googleapis.com/auth/spreadsheets']
);

const spreadsheetId = '1J8gCRcoZoZWx4Wvqjht9nd_o77ogxoYcS03anzt8sKc';

async function getSheetData(range) {
  const sheets = google.sheets({ version: 'v4', auth: client });
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });
  return res.data.values;
}

async function updateSheetData(range, values) {
  const sheets = google.sheets({ version: 'v4', auth: client });
  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range,
    valueInputOption: 'RAW',
    resource: { values },
  });
}

let userData = {};
let currentStep = null;

async function checkAndFillCard(cardNumber) {
  const rows = await getSheetData('–õ–∏—Å—Ç1!A2:I52');
  const cardRow = rows.findIndex(row => row[1] === cardNumber); 

  if (cardRow !== -1) {
    const rowData = rows[cardRow].slice(3);
    const isRowEmpty = rowData.every(cell => !cell); 

    if (isRowEmpty) {
      return cardRow + 2; 
    } else {
      return null;
    }
  } else {
    return -1; 
  }
}

bot.start((ctx) => {
  chatId = ctx.chat.id;
  ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ:',
    Markup.keyboard([['–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ üìù', '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç üîÑ', '–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è üö∂']])
      .resize()
      .oneTime()
  );

  ctx.reply(
    `üîî *–ü–∞–º'—è—Ç–∫–∞ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:*
    1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.
    2. –ü–∏—à—ñ—Ç—å –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ (–≤–µ–ª–∏–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é).
    3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.
    4. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏: –î–î.–ú–ú.–†–†–†–†.
    5. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤.
    6. –Ü–º'—è –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –ø–æ–±–∞—Ç—å–∫–æ–≤i: –ø–æ–≤–Ω—ñ—Å—Ç—é, –±–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å.

    –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üòä`,
    { parse_mode: 'Markdown' }
  );

  currentStep = null; 
});

async function checkBirthdays() {
  const rows = await getSheetData('–õ–∏—Å—Ç1!A2:I52');
  const today = new Date();
  const todayDay = today.getDate();
  const todayMonth = today.getMonth() + 1;

  rows.forEach(row => {
    const dob = row[6]; 
    const fullName = row[4]; 

    if (dob) {
      const [day, month] = dob.split('.').map(Number);
      if (day === todayDay && month === todayMonth) {
        bot.telegram.sendMessage(chatId, `üéÇ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É ${fullName}! üéâ`);
      }
    }
  });
}


bot.hears('–î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ üìù', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, #0016):');
  currentStep = 'card_number'; 
});

bot.hears('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç üîÑ', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É:');
  currentStep = 'renew_card';
});

bot.hears('–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è üö∂', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, #0016):');
  currentStep = 'increment_visits'; 
});

bot.on('text', async (ctx) => {
  const text = ctx.message.text;

  if (currentStep === 'card_number') {
    userData.cardNumber = text;

    const rowIndex = await checkAndFillCard(userData.cardNumber);

    if (rowIndex === -1) {
      ctx.reply(`‚ùå –ö–∞—Ä—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º ${userData.cardNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä.`);
    } else if (rowIndex === null) {
      ctx.reply(`‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º ${userData.cardNumber} –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä.`);
    } else {
      userData.rowIndex = rowIndex; 
      ctx.reply('‚úÖ –ö–∞—Ä—Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–∞! üéâ –í–≤–µ–¥–∏ –∫–æ–ª—ñ—Ä –∫–∞—Ä—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–∏–Ω—è –∫–∞—Ä—Ç–∫–∞ –∞–±–æ —á–µ—Ä–≤–æ–Ω–∞ –∫–∞—Ä—Ç–∫–∞):');
      currentStep = 'color';
    }
  } else if (currentStep === 'color') {
    userData.color = text;
    ctx.reply('üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 12.09.2024):');
    currentStep = 'purchase_date';
  } else if (currentStep === 'purchase_date') {
    userData.purchaseDate = text;
    ctx.reply('üíµ –í–≤–µ–¥–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å:');
    currentStep = 'price';
  } else if (currentStep === 'price') {
    userData.price = text;
    ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏ –ü–Ü–ë:');
    currentStep = 'fio';
  } else if (currentStep === 'fio') {
    userData.fio = text;
    ctx.reply('üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:');
    currentStep = 'phone';
  } else if (currentStep === 'phone') {
    userData.phone = text;
    ctx.reply('üéÇ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 23.10.2007):');  
    currentStep = 'dob'; 
  } else if (currentStep === 'dob') { 
    userData.dob = text;
    ctx.reply('üóì –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–æ–¥—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 4):');
    currentStep = 'events';
  } else if (currentStep === 'events') {
    userData.events = text;
    ctx.reply('üö∂ –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1):');
    currentStep = 'visits';
  } else if (currentStep === 'visits') {
    userData.visits = text;

    const rowIndex = userData.rowIndex;

    if (rowIndex) {
      await updateSheetData(`–õ–∏—Å—Ç1!A${rowIndex}:J${rowIndex}`, [
        [
          userData.color,
          userData.cardNumber,
          userData.purchaseDate,
          userData.price,
          userData.fio,
          userData.phone,
          userData.dob,  
          userData.events,
          userData.visits,
          userData.events - userData.visits 
        ],
      ]);

      ctx.reply('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ! üéâ');
      currentStep = null;
      userData = {}; 
    } else {
      ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: rowIndex –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
  }
  
  if (currentStep === 'increment_visits') {
    const cardNumber = text;

    const rows = await getSheetData('–õ–∏—Å—Ç1!A2:I52');
    const cardRow = rows.findIndex(row => row[1] === cardNumber);

    if (cardRow !== -1) {
        const rowIndex = cardRow + 2; 
        let currentVisits = parseInt(rows[cardRow][8], 10);
        let totalEvents = parseInt(rows[cardRow][7], 10); 
        let remainingEvents = totalEvents - currentVisits; 

        if (remainingEvents > 0) { 
            currentVisits++; 

            await updateSheetData(`–õ–∏—Å—Ç1!H${rowIndex}:J${rowIndex}`, [
                [totalEvents, currentVisits, totalEvents - currentVisits],
            ]);

            ctx.reply(`‚úÖ –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä —É –∫–∞—Ä—Ç–∏ ${cardNumber} ${currentVisits} –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å. –ó–∞–ª–∏—à–∏–ª–æ—Å—è –∑–∞—Ö–æ–¥—ñ–≤: ${totalEvents - currentVisits}.`);
        } else {
            ctx.reply(`‚ö†Ô∏è –£—Å—ñ –∑–∞—Ö–æ–¥–∏ –¥–ª—è –∫–∞—Ä—Ç–∫–∏ ${cardNumber} –≤–∂–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑–∞—Ö–æ–¥—ñ–≤: 0.`);
        }
    } else {
        ctx.reply(`‚ùå –ö–∞—Ä—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º ${cardNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.`);
    }

    currentStep = null; 
}

  else if (currentStep === 'renew_card') {
    const cardNumber = text;

    const rows = await getSheetData('–õ–∏—Å—Ç1!A2:J52');
    const cardRow = rows.findIndex(row => row[1] === cardNumber);

    if (cardRow !== -1) {
      userData.rowIndex = cardRow + 2; 
      ctx.reply('üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏:');
      currentStep = 'new_purchase_date';
    } else {
      ctx.reply(`‚ùå –ö–∞—Ä—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º ${cardNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä.`);
      currentStep = null;
    }
  } else if (currentStep === 'new_purchase_date') {
    const newPurchaseDate = text;
    const rowIndex = userData.rowIndex;

    if (rowIndex) {
      const rows = await getSheetData(`–õ–∏—Å—Ç1!A${rowIndex}:J${rowIndex}`);
      const events = rows[0][7]; 

      await updateSheetData(`–õ–∏—Å—Ç1!C${rowIndex}:J${rowIndex}`, [
        [
          newPurchaseDate,
          rows[0][3],
          rows[0][4],
          rows[0][5], 
          rows[0][6], 
          events, 
          0,
          events 
        ],
      ]);

      ctx.reply('‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ! –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å —Å–∫–∏–Ω—É—Ç–æ –Ω–∞ 0. üéâ');
      currentStep = null;
    } else {
      ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: rowIndex –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
  }

});

cron.schedule('38 19 * * *', checkBirthdays);

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
